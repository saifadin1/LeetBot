name: Build & Deploy to EC2

on:
  push:
    branches: [ "main" ]

env:
  DOTNET_VERSION: '9.0'
  PUBLISH_DIR: publish    # this is the folder name created inside LeetBot (LeetBot/publish)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Show repo tree (debug)
        run: |
          echo "Repository root:"
          ls -la
          echo "LeetBot folder contents:"
          ls -la LeetBot || true

      - name: Restore and build (LeetBot)
        working-directory: LeetBot
        run: |
          if [ -f "LeetBot.sln" ]; then
            dotnet restore LeetBot.sln
            dotnet build LeetBot.sln --configuration Release --no-restore
          else
            dotnet restore LeetBot.csproj
            dotnet build LeetBot.csproj --configuration Release --no-restore
          fi

      - name: Publish (LeetBot)
        working-directory: LeetBot
        run: |
          if [ -f "LeetBot.sln" ]; then
            dotnet publish LeetBot.sln -c Release -o ${{ env.PUBLISH_DIR }}
          else
            dotnet publish LeetBot.csproj -c Release -o ${{ env.PUBLISH_DIR }}
          fi

      - name: Verify publish output (debug & fail early)
        # compute the absolute path to the publish folder and show it
        env:
          SRC: ${{ github.workspace }}/LeetBot/${{ env.PUBLISH_DIR }}
        run: |
          echo "Expecting publish folder at: $SRC"
          if [ ! -d "$SRC" ]; then
            echo "ERROR: publish directory not found: $SRC"
            echo "Listing possible publish locations:"
            ls -la "${{ github.workspace }}" || true
            ls -la "${{ github.workspace }}/LeetBot" || true
            exit 1
          fi
          echo "Publish folder exists. Contents:"
          ls -la "$SRC"

      - name: Prepare SSH key
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # optional: add the host to known_hosts properly (safer) or disable checking during first run
          printf "Host *\n  StrictHostKeyChecking no\n" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Copy files to EC2 (rsync)
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          PORT: ${{ secrets.EC2_PORT || '22' }}
          APP_DIR: ${{ secrets.APP_DIR || '/home/ubuntu/LeetBot' }}
          SRC: ${{ github.workspace }}/LeetBot/${{ env.PUBLISH_DIR }}
        run: |
          echo "Copying from $SRC to $USER@$HOST:$APP_DIR"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p $PORT $USER@$HOST "mkdir -p $APP_DIR"
          rsync -az --delete -e "ssh -i ~/.ssh/id_rsa -p $PORT" "$SRC"/ $USER@$HOST:$APP_DIR/

      - name: Restart application on EC2 (verbose debug)
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          PORT: ${{ secrets.EC2_PORT || '22' }}
          APP_DIR: ${{ secrets.APP_DIR || '/home/ubuntu/LeetBot' }}
          DLL_NAME: LeetBot.dll
        run: |
          set -x
      
          SSH_CMD="ssh -vvv -i ~/.ssh/id_rsa -p $PORT -o StrictHostKeyChecking=no -o ConnectTimeout=10 $USER@$HOST"
      
          echo "Testing SSH connectivity..."
          $SSH_CMD "echo 'SSH OK' && whoami && pwd" || { echo "SSH connectivity test failed"; exit 1; }
      
          echo "Listing target directory contents: $APP_DIR"
          $SSH_CMD "ls -la $APP_DIR || true"
      
          echo "Check that DLL exists:"
          $SSH_CMD "if [ -f $APP_DIR/$DLL_NAME ]; then echo 'DLL exists'; else echo 'DLL NOT FOUND'; ls -la $APP_DIR; fi"
      
          echo "Check dotnet runtime on remote (show first 200 chars of dotnet --info or error):"
          $SSH_CMD "dotnet --info || echo 'dotnet not found or failed'"
      
          echo "Show last 200 lines of previous app log file (if present):"
          $SSH_CMD "tail -n 200 $APP_DIR/log.txt || echo 'no log file yet'"
      
          echo "Attempt graceful stop (pkill) and start new process"
          $SSH_CMD "pkill -f 'dotnet $DLL_NAME' || true; sleep 1; nohup dotnet $APP_DIR/$DLL_NAME > $APP_DIR/log.txt 2>&1 & echo \$! > $APP_DIR/last_pid && echo 'started'"
      
          echo "Show running dotnet processes (grep LeetBot):"
          $SSH_CMD "ps aux | grep -i dotnet | grep $DLL_NAME || true"
      
          echo "Show newly created log tail:"
          $SSH_CMD "tail -n 80 $APP_DIR/log.txt || true"
